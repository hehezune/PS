//doubly linked list

function DoublyLinkedList() {
    let Node = function(element) {

        this.element = element;
        this.next = null;
        this.prev = null;
    };

    let length = 0;
    let head = null;
    let tail = null;

    this.insert = function(position, element) {
        if (position > -1 && position <= length) {

            let node = new Node(element), current = head, previous, index = 0;

            if (position === 0) {

                if (!head) { //아무것도 없을 때
                    head = node;
                    tail = node;
                } else { //뭔가 있는데 첫번째에 끼워넣을 때
                    node.next = current;
                    current.prev = node;
                    head = node;
                }
            } else if (position === length) { //그림 보면서 하면 편함
                                            // current는 지금 갖고 놀 자리의 node를 지칭하는 것
                current = tail; // current라는 임시 변수에 tail(마지막 노드를 가리킴) 저장
                current.next = node; // 기존의 마지막 node는 현재 새로 추가하는 node를 가리ㅌ킴
                node.prev = current; //지금 추가한 node 의 prev는 currnent (기존의 마지막 node)
                tail = node; // 마지막 node를 가리키 tail 은 node를 가리킴.
            } else {
                while (index++ < position) { //position : 내가 추가하고 싶은 자리, 이러면 current는 기존의 1 인덱스 노드를 가리키는 중
                    previous = current;
                    current = current.next;
                }
                node.next = current;
                previous.next = node;
                current.prev = node;
                node.prev = previous;
            }

            length++;
            return true;

        } else {
            return false;
        }
    };
    this.removeAt = function(position) {

        if (position > -1 && position < length) {

            let current = head, previous, index = 0;

            if (position === 0) {

                head = current.next;
                if (length === 1) { // 이미 하나에서 지운거면?
                    tail = null;
                } else {
                    head.prev = null;
                }
            } else if (position === length - 1) {
                current = tail;
                tail = current.prev;
                tail.next = null;
            } else {
                while (index++ < position) {

                    previous = current;
                    current = current.next;
                } // current는 position에 해당하는 node를 가리킨다.

                previous.next = current.next;
                current.next.prev = previous
            }

            length--;

            return current.element;
        } else {
            return null;
        }
    }
}
